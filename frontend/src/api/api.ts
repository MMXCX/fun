/* tslint:disable */
/* eslint-disable */
/**
 * Funinvest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Contain accessToken
 * @export
 * @interface AccessTokenSchema
 */
export interface AccessTokenSchema {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenSchema
     */
    'accessToken': string;
}
/**
 * Contain activate uuid code
 * @export
 * @interface ActivateUserAccountRequest
 */
export interface ActivateUserAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof ActivateUserAccountRequest
     */
    'activateCode': string;
}
/**
 * Contain captcha SVG data and UUID
 * @export
 * @interface CaptchaContentSchema
 */
export interface CaptchaContentSchema {
    /**
     * 
     * @type {string}
     * @memberof CaptchaContentSchema
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof CaptchaContentSchema
     */
    'svg': string;
}
/**
 * Pair of captcha text and uuid which sent to server
 * @export
 * @interface CaptchaSendSchema
 */
export interface CaptchaSendSchema {
    /**
     * Text from captcha image
     * @type {string}
     * @memberof CaptchaSendSchema
     */
    'captchaText'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaptchaSendSchema
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'uuid': string;
}
/**
 * Contain email and password
 * @export
 * @interface LoginSchema
 */
export interface LoginSchema {
    /**
     * 
     * @type {string}
     * @memberof LoginSchema
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginSchema
     */
    'password': string;
}
/**
 * Contain information
 * @export
 * @interface MessageSchema
 */
export interface MessageSchema {
    /**
     * 
     * @type {string}
     * @memberof MessageSchema
     */
    'status': MessageSchemaStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageSchema
     */
    'message'?: string;
}

export const MessageSchemaStatusEnum = {
    Ok: 'ok',
    Error: 'error'
} as const;

export type MessageSchemaStatusEnum = typeof MessageSchemaStatusEnum[keyof typeof MessageSchemaStatusEnum];

/**
 * Contain data for registration
 * @export
 * @interface RegSchema
 */
export interface RegSchema {
    /**
     * 
     * @type {string}
     * @memberof RegSchema
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegSchema
     */
    'password': string;
    /**
     * 
     * @type {CaptchaSendSchema}
     * @memberof RegSchema
     */
    'captcha'?: CaptchaSendSchema;
}
/**
 * 
 * @export
 * @interface RestorePasswordRequest
 */
export interface RestorePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof RestorePasswordRequest
     */
    'email': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activate exist user account
         * @summary All
         * @param {ActivateUserAccountRequest} activateUserAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUserAccount: async (activateUserAccountRequest: ActivateUserAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activateUserAccountRequest' is not null or undefined
            assertParamExists('activateUserAccount', 'activateUserAccountRequest', activateUserAccountRequest)
            const localVarPath = `/activation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activateUserAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new user
         * @summary Not Auth
         * @param {RegSchema} regSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser: async (regSchema: RegSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regSchema' is not null or undefined
            assertParamExists('createNewUser', 'regSchema', regSchema)
            const localVarPath = `/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(regSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return new accessToken
         * @summary Auth only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewAccessToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login to system
         * @summary Not Auth
         * @param {LoginSchema} loginSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginSchema: LoginSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginSchema' is not null or undefined
            assertParamExists('login', 'loginSchema', loginSchema)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When logout
         * @summary Auth only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Activate exist user account
         * @summary All
         * @param {ActivateUserAccountRequest} activateUserAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateUserAccount(activateUserAccountRequest: ActivateUserAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateUserAccount(activateUserAccountRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.activateUserAccount']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create new user
         * @summary Not Auth
         * @param {RegSchema} regSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewUser(regSchema: RegSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewUser(regSchema, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.createNewUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return new accessToken
         * @summary Auth only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewAccessToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewAccessToken(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.getNewAccessToken']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Login to system
         * @summary Not Auth
         * @param {LoginSchema} loginSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginSchema: LoginSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginSchema, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.login']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * When logout
         * @summary Auth only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.logout']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Activate exist user account
         * @summary All
         * @param {ActivateUserAccountRequest} activateUserAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUserAccount(activateUserAccountRequest: ActivateUserAccountRequest, options?: any): AxiosPromise<AccessTokenSchema> {
            return localVarFp.activateUserAccount(activateUserAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new user
         * @summary Not Auth
         * @param {RegSchema} regSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser(regSchema: RegSchema, options?: any): AxiosPromise<AccessTokenSchema> {
            return localVarFp.createNewUser(regSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Return new accessToken
         * @summary Auth only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewAccessToken(options?: any): AxiosPromise<AccessTokenSchema> {
            return localVarFp.getNewAccessToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Login to system
         * @summary Not Auth
         * @param {LoginSchema} loginSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginSchema: LoginSchema, options?: any): AxiosPromise<AccessTokenSchema> {
            return localVarFp.login(loginSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * When logout
         * @summary Auth only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<MessageSchema> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Activate exist user account
     * @summary All
     * @param {ActivateUserAccountRequest} activateUserAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public activateUserAccount(activateUserAccountRequest: ActivateUserAccountRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).activateUserAccount(activateUserAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new user
     * @summary Not Auth
     * @param {RegSchema} regSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createNewUser(regSchema: RegSchema, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).createNewUser(regSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return new accessToken
     * @summary Auth only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getNewAccessToken(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getNewAccessToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login to system
     * @summary Not Auth
     * @param {LoginSchema} loginSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginSchema: LoginSchema, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(loginSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When logout
     * @summary Auth only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CaptchaApi - axios parameter creator
 * @export
 */
export const CaptchaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate new captcha and return pair of svg data and uuid 
         * @summary All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptcha: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/captcha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaptchaApi - functional programming interface
 * @export
 */
export const CaptchaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaptchaApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate new captcha and return pair of svg data and uuid 
         * @summary All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaptcha(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaptchaContentSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaptcha(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CaptchaApi.getCaptcha']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CaptchaApi - factory interface
 * @export
 */
export const CaptchaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaptchaApiFp(configuration)
    return {
        /**
         * Generate new captcha and return pair of svg data and uuid 
         * @summary All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptcha(options?: any): AxiosPromise<CaptchaContentSchema> {
            return localVarFp.getCaptcha(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaptchaApi - object-oriented interface
 * @export
 * @class CaptchaApi
 * @extends {BaseAPI}
 */
export class CaptchaApi extends BaseAPI {
    /**
     * Generate new captcha and return pair of svg data and uuid 
     * @summary All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaApi
     */
    public getCaptcha(options?: AxiosRequestConfig) {
        return CaptchaApiFp(this.configuration).getCaptcha(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get data only for authorization users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
    return {
        /**
         * Get data only for authorization users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getData(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DataApi.getData']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataApiFp(configuration)
    return {
        /**
         * Get data only for authorization users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getData(options?: any): AxiosPromise<void> {
            return localVarFp.getData(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * Get data only for authorization users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public getData(options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).getData(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RestoreApi - axios parameter creator
 * @export
 */
export const RestoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Here we send new password and uuid code
         * @summary Not Auth
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordRequest: ChangePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            assertParamExists('changePassword', 'changePasswordRequest', changePasswordRequest)
            const localVarPath = `/newpass`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * On this endpoint we send email
         * @summary Not Auth
         * @param {RestorePasswordRequest} restorePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restorePassword: async (restorePasswordRequest: RestorePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restorePasswordRequest' is not null or undefined
            assertParamExists('restorePassword', 'restorePasswordRequest', restorePasswordRequest)
            const localVarPath = `/restore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restorePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestoreApi - functional programming interface
 * @export
 */
export const RestoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestoreApiAxiosParamCreator(configuration)
    return {
        /**
         * Here we send new password and uuid code
         * @summary Not Auth
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RestoreApi.changePassword']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * On this endpoint we send email
         * @summary Not Auth
         * @param {RestorePasswordRequest} restorePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restorePassword(restorePasswordRequest: RestorePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restorePassword(restorePasswordRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RestoreApi.restorePassword']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * RestoreApi - factory interface
 * @export
 */
export const RestoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestoreApiFp(configuration)
    return {
        /**
         * Here we send new password and uuid code
         * @summary Not Auth
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(changePasswordRequest: ChangePasswordRequest, options?: any): AxiosPromise<MessageSchema> {
            return localVarFp.changePassword(changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * On this endpoint we send email
         * @summary Not Auth
         * @param {RestorePasswordRequest} restorePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restorePassword(restorePasswordRequest: RestorePasswordRequest, options?: any): AxiosPromise<MessageSchema> {
            return localVarFp.restorePassword(restorePasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RestoreApi - object-oriented interface
 * @export
 * @class RestoreApi
 * @extends {BaseAPI}
 */
export class RestoreApi extends BaseAPI {
    /**
     * Here we send new password and uuid code
     * @summary Not Auth
     * @param {ChangePasswordRequest} changePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestoreApi
     */
    public changePassword(changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig) {
        return RestoreApiFp(this.configuration).changePassword(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * On this endpoint we send email
     * @summary Not Auth
     * @param {RestorePasswordRequest} restorePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestoreApi
     */
    public restorePassword(restorePasswordRequest: RestorePasswordRequest, options?: AxiosRequestConfig) {
        return RestoreApiFp(this.configuration).restorePassword(restorePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



