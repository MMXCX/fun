version: '3.8'

services:
  frontend:
    image: node:${NODE_VERSION}
    container_name: fi_frontend
    restart: unless-stopped
    ports:
      - '${CLIENT_PORT}:3000'
    environment:
      - API_URL=${API_URL}
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: >
      bash -c '
      npm run build
      && npm i -g serve
      && serve ./dist -s'
    networks:
      - frontend
  backend:
    image: node:${NODE_VERSION}
    container_name: fi_backend
    restart: unless-stopped
    ports:
      - '${API_PORT}:${API_PORT}'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CLIENT_URL=${CLIENT_URL}
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - API_PREFIX=${API_PREFIX}
    volumes:
      - ./backend:/app
    working_dir: /app
    command: >
      bash -c '
      npx tsc
      && npm run start'
    networks:
      - backend-mysql
      - backend-postgres
#  mysql:
#    image: mysql:${MYSQL_VERSION}
#    container_name: fi_mysql
#    restart: unless-stopped
#    environment:
#      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
#    volumes:
#      - ./mysql:/var/lib/mysql
#    networks:
#      - backend-mysql
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: fi_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - ./postgres:/var/lib/postgresql/data
    networks:
      - backend-postgres
networks:
  backend-mysql:
  frontend:
  backend-postgres: